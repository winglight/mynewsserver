{"version":3,"sources":["topics/TopicList.js","news/NewsList.js","models/data_provider_config.js","App.js","registerServiceWorker.js","index.js","stringResource.js"],"names":["crawl","fetch","method","then","showNotification","catch","e","console","error","cardActionStyle","zIndex","display","float","MyGallery","record","source","forEach","ele","images","ListActions","resource","filters","displayedFilters","filterValues","basePath","showFilter","CardActions","style","React","cloneElement","context","CreateButton","RefreshButton","Button","primary","label","onClick","TopicList","props","List","title","appMessages","topicList","sort","field","order","perPage","actions","Datagrid","options","multiSelectable","bodyOptions","stripedRows","showRowHover","displayRowCheckbox","headerOptions","adjustForCheckbox","rowOptions","selectable","TextField","UrlField","DateField","showTime","DeleteButton","EditButton","ShowButton","TopicShow","Show","SimpleShowLayout","ImageField","SelectField","choices","id","name","text","img","video","voice","link","locales","ArrayField","TopicEdit","Edit","topicEdit","SimpleForm","TextInput","disabled","SelectInput","TopicCreate","Create","clearNews","cardStyle","width","margin","verticalAlign","readingStyle","fontSize","lineHeight","ReadingCard","ids","data","map","Card","key","CardHeader","subtitle","Typography","ReferenceField","reference","RichTextField","lightboxWidth","textAlign","NewsFilter","Filter","ReferenceInput","alwaysOn","optionText","defaultProps","NewsList","NewsShow","NewsEdit","NewsCreate","parseConfig","URL","process","SERVER_URL","JAVASCRIPT_KEY","APP_ID","dataProvider","ParseClient","authProvider","ParseAuth","App","Admin","Resource","list","show","edit","create","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","ReactDOM","render","document","getElementById","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","appTitle","topicTitle","newsTitle","newsList","newsEdit"],"mappings":"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","file":"static/js/main.74354096.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardHeader, Typography, CardActions, Button } from '@material-ui/core';\nimport {\n    List,\n    Show,\n    SimpleShowLayout,\n    TextField,\n    DateField,\n    SelectField,\n    ImageField,\n    UrlField,\n    ReferenceManyField,\n    SingleFieldList,\n    Edit,\n    Create,\n    Datagrid,\n    EditButton,\n    SelectInput,\n    SimpleForm,\n    TextInput,\n    ShowButton,\n    DeleteButton,\n    RefreshButton,\n    showNotification, \n    CreateButton,\n    ArrayField\n} from 'react-admin';\nimport appMessages from '../stringResource';\nimport Gallery from 'react-grid-gallery';\n\nconst crawl = () => {\n    fetch('/crawler', {method: 'GET'})\n        .then(() => {\n            showNotification('Crawled All!');\n        })\n        .catch((e) => {\n            console.error(e);\n            showNotification('Error: crawle all', 'warning')\n        });\n};\n\nconst cardActionStyle = {\n    zIndex: 2,\n    display: 'inline-block',\n    float: 'right',\n};\n\nconst MyGallery = ({ record = {}, source }) => {\n    if(record[source]) {\n        record[source].forEach(function (ele) {\n            ele['src'] = ele['url'];\n            ele['thumbnail'] = ele['url'];\n            ele['thumbnailWidth'] = 100;\n            ele['thumbnailHeight'] = 100;\n        });\n        return <Gallery images={record[source]} />\n    }\n};\n\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\n    <CardActions style={cardActionStyle}>\n        {filters && React.cloneElement(filters, {\n            resource,\n            showFilter,\n            displayedFilters,\n            filterValues,\n            context: 'button'\n        })}\n        <CreateButton basePath={basePath}/>\n        <RefreshButton/>\n        <Button primary label=\"Crawl All\" onClick={crawl}/>\n    </CardActions>\n);\n\n\nexport const TopicList = (props) => (\n    <List {...props} title={appMessages.topicList} sort={{field: 'crawlAt', order: 'DESC'}} perPage={25}\n          actions={<ListActions/>}>\n        <Datagrid options={{multiSelectable:true}} bodyOptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}} headerOptions={{adjustForCheckbox:true}} rowOptions={{selectable: true}}>\n            <TextField source=\"id\"/>\n            <TextField source=\"name\"/>\n            <UrlField source=\"url\" title=\"Link\"/>\n            {/*<ImageField source=\"cover\"/>*/}\n            {/*<TextField source=\"encode\"/>*/}\n            <TextField source=\"contains\" label=\"链接包含内容\"/>\n            <TextField source=\"nextPageTitle\" label=\"下一页标题\"/>\n            <TextField source=\"nextPageIncludeUrl\" label=\"下一页链接包含内容\"/>\n            <TextField source=\"imageIncludeUrl\" label=\"图片链接包含内容\"/>\n            {/*<SelectField source=\"contentType\" choices={[*/}\n                {/*{id: 'text', name: appMessages.text},*/}\n                {/*{id: 'img', name: appMessages.img},*/}\n                {/*{id: 'video', name: appMessages.video},*/}\n                {/*{id: 'voice', name: appMessages.voice},*/}\n                {/*{id: 'link', name: appMessages.link},*/}\n            {/*]}/>*/}\n            <DateField source=\"crawlAt.iso\" showTime label=\"更新时间\"/>\n                <TextField source=\"latestLinks.length\" label=\"更新数量\"/>\n            <TextField source=\"lastlinks.length\" label=\"链接数量\"/>\n            <DeleteButton/>\n            <EditButton/>\n            <ShowButton/>\n        </Datagrid>\n    </List>\n);\n\nexport const TopicShow = (props) => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"id\"/>\n            <TextField source=\"name\"/>\n            <UrlField source=\"url\" title=\"Link\"/>\n            <ImageField source=\"cover\"/>\n            <TextField source=\"encode\"/>\n            <TextField source=\"contains\" label=\"链接包含内容\"/>\n            <TextField source=\"nextPageTitle\" label=\"下一页标题\"/>\n            <TextField source=\"nextPageIncludeUrl\" label=\"下一页链接包含内容\"/>\n            <TextField source=\"imageIncludeUrl\" label=\"图片链接包含内容\"/>\n            <SelectField source=\"contentType\" choices={[\n                {id: 'text', name: appMessages.text},\n                {id: 'img', name: appMessages.img},\n                {id: 'video', name: appMessages.video},\n                {id: 'voice', name: appMessages.voice},\n                {id: 'link', name: appMessages.link},\n            ]}/>\n            <DateField source=\"crawlAt\" locales=\"zh-CN\" showTime/>\n            <ArrayField source=\"latestLinks\">\n            <Datagrid>\n                <TextField source=\"title\"/>\n                <UrlField source=\"url\">\n\n                </UrlField>\n                </Datagrid>\n            </ArrayField>\n            <ArrayField source=\"lastlinks\">\n            <Datagrid>\n                <TextField source=\"title\"/>\n                <UrlField source=\"url\" title=\"title\">\n                </UrlField>\n                </Datagrid>\n            </ArrayField>\n            <MyGallery source=\"images\"/>\n        </SimpleShowLayout>\n    </Show>\n);\n\nexport const TopicEdit = (props) => (\n    <Edit title={appMessages.topicEdit} {...props}>\n        <SimpleForm>\n        <TextInput disabled source=\"id\" />\n            <TextInput source=\"name\"/>\n            <TextInput source=\"url\" title=\"Link\"/>\n            <TextInput source=\"cover\"/>\n            <TextInput source=\"encode\"/>\n            <TextInput source=\"contains\" label=\"链接包含内容\"/>\n            <TextInput source=\"nextPageTitle\" label=\"下一页标题\"/>\n            <TextInput source=\"nextPageIncludeUrl\" label=\"下一页链接包含内容\"/>\n            <TextInput source=\"imageIncludeUrl\" label=\"图片链接包含内容\"/>\n            <SelectInput source=\"contentType\" choices={[\n                {id: 'text', name: \"文本\"},\n                {id: 'img', name: \"图片\"},\n                {id: 'video', name: \"视频\"},\n                {id: 'voice', name: \"语音\"},\n                {id: 'link', name: \"链接\"},\n            ]}/>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const TopicCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\"/>\n            <TextInput source=\"url\" title=\"Link\"/>\n            <TextInput source=\"cover\"/>\n            <TextInput source=\"encode\"/>\n            <TextInput source=\"contains\" label=\"链接包含内容\"/>\n            <TextInput source=\"nextPageTitle\" label=\"下一页标题\"/>\n            <TextInput source=\"nextPageIncludeUrl\" label=\"下一页链接包含内容\"/>\n            <TextInput source=\"imageIncludeUrl\" label=\"图片链接包含内容\"/>\n            <SelectInput source=\"contentType\" choices={[\n                {id: 'text', name: \"文本\"},\n                {id: 'img', name: \"图片\"},\n                {id: 'video', name: \"视频\"},\n                {id: 'voice', name: \"语音\"},\n                {id: 'link', name: \"链接\"},\n            ]}/>\n        </SimpleForm>\n    </Create>\n);\n","import React from 'react';\nimport { Card, CardHeader, Typography, CardActions, Button } from '@material-ui/core';\nimport {\n    List,\n    Show,\n    SimpleShowLayout,\n    TextField,\n    DateField,\n    SelectField,\n    ImageField,\n    UrlField,\n    RichTextField,\n    SingleFieldList,\n    ReferenceField,\n    ReferenceInput,\n    Filter,\n    Edit,\n    Create,\n    Datagrid,\n    EditButton,\n    SelectInput,\n    SimpleForm,\n    TextInput,\n    ShowButton,\n    CreateButton,\n    DeleteButton,\n    RefreshButton,\n    showNotification\n} from 'react-admin';\nimport Gallery from 'react-grid-gallery';\n\nconst clearNews = () => {\n    fetch('/clearNews', {method: 'GET'})\n        .then(() => {\n            showNotification('clearNews All!');\n        })\n        .catch((e) => {\n            console.error(e);\n            showNotification('Error: clearNews all', 'warning')\n        });\n};\n\nconst cardActionStyle = {\n    zIndex: 2,\n    display: 'inline-block',\n    float: 'right',\n};\n\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\n    <CardActions style={cardActionStyle}>\n        {filters && React.cloneElement(filters, {\n            resource,\n            showFilter,\n            displayedFilters,\n            filterValues,\n            context: 'button'\n        })}\n        <CreateButton basePath={basePath}/>\n        <RefreshButton/>\n        <Button primary label=\"Clear All\" onClick={clearNews}/>\n    </CardActions>\n);\n\nconst cardStyle = {\n    width: '100%',\n    margin: '0.5em',\n    display: 'inline-block',\n    verticalAlign: 'top',\n\n};\n\nconst readingStyle = {\n    width: '1000',\n    margin: '0.5em',\n    fontSize: '24px',\n    lineHeight: '44px'\n};\n\nconst ReadingCard = ({ ids, data, basePath }) => (\n    <div style={{ margin: '1em' }}>\n        {ids.map(id =>\n            <Card key={id} style={cardStyle}>\n                <CardHeader\n                    title={<TextField record={data[id]} source=\"title\" />}\n                    subtitle={<DateField record={data[id]} source=\"crawlAt.iso\" showTime/>}\n                />\n                <Typography>\n                    <ReferenceField label=\"订阅源\" basePath={basePath} record={data[id]} source=\"topic\" reference=\"TopicModel\">\n                        <TextField source=\"name\" />\n                    </ReferenceField>\n                    - >\n                    <UrlField record={data[id]} source=\"url\"  />\n                </Typography>\n                <Typography style={readingStyle}>\n                    <RichTextField record={data[id]} source=\"content\"  />\n                </Typography>\n                <Typography style={readingStyle}>\n                    <MyGallery record={data[id]} source=\"images\"  lightboxWidth={\"100%\"}/>\n                </Typography>\n                <CardActions style={{ textAlign: 'right' }}>\n                    <DeleteButton resource=\"NewsModel\" basePath={basePath} record={data[id]}/>\n                    <EditButton resource=\"NewsModel\" basePath={basePath} record={data[id]}/>\n                    <ShowButton resource=\"NewsModel\" basePath={basePath} record={data[id]}/>\n                </CardActions>\n            </Card>\n        )}\n    </div>\n);\n\nconst MyGallery = ({ record = {}, source }) => {\n    if(record[source]) {\n        record[source].forEach(function (ele) {\n            ele['src'] = ele['url'];\n            ele['thumbnail'] = ele['url'];\n            ele['thumbnailWidth'] = 100;\n            ele['thumbnailHeight'] = 100;\n        });\n        return <Gallery images={record[source]} />\n    }else {\n        return <TextField>No images</TextField>\n    }\n};\n\nconst NewsFilter = (props) => (\n    <Filter {...props}>\n        <ReferenceInput label=\"订阅源\" source=\"topic\" reference=\"TopicModel\" alwaysOn>\n            <SelectInput optionText=\"name\" />\n        </ReferenceInput>\n    </Filter>\n);\n\nReadingCard.defaultProps = {\n    data: {},\n    ids: [],\n};\n\nexport const NewsList = (props) => (\n    <List {...props} title=\"文章列表\" filters={<NewsFilter />} sort={{field: 'crawlAt', order: 'DESC'}} perPage={25} actions={<ListActions/>}>\n\n        <ReadingCard />\n    </List>\n);\n\nexport const NewsShow = (props) => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"id\"/>\n            <TextField source=\"title\"/>\n            <TextField source=\"topic\"/>\n            <UrlField source=\"url\" title=\"Link\"/>\n            <ImageField source=\"cover\"/>\n            <TextField source=\"encode\"/>\n            <RichTextField source=\"content\"/>\n            <SelectField source=\"contentType\" choices={[\n                {id: 'text', name: \"文本\"},\n                {id: 'img', name: \"图片\"},\n                {id: 'video', name: \"视频\"},\n                {id: 'voice', name: \"声音\"},\n                {id: 'link', name: \"链接\"},\n            ]}/>\n            <DateField source=\"crawlAt.iso\" locales=\"zh-CN\" showTime/>\n            <MyGallery source=\"images\" lightboxWidth={\"100%\"}/>\n        </SimpleShowLayout>\n    </Show>\n);\n\nexport const NewsEdit = (props) => (\n    <Edit title=\"文章编辑\" {...props}>\n        <SimpleForm>\n        <TextInput disabled source=\"id\" />\n            <TextInput source=\"title\"/>\n            <TextInput source=\"topic\"/>\n            <TextInput source=\"url\" title=\"Link\"/>\n            <TextInput source=\"cover\"/>\n            <TextInput source=\"encode\"/>\n            <SelectInput source=\"contentType\" choices={[\n                {id: 'text', name: \"文本\"},\n                {id: 'img', name: \"图片\"},\n                {id: 'video', name: \"视频\"},\n                {id: 'voice', name: \"语音\"},\n                {id: 'link', name: \"链接\"},\n            ]}/>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const NewsCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"title\"/>\n            <TextInput source=\"topic\"/>\n            <TextInput source=\"url\" title=\"Link\"/>\n            <TextInput source=\"cover\"/>\n            <TextInput source=\"encode\"/>\n            <SelectInput source=\"contentType\" choices={[\n                {id: 'text', name: \"文本\"},\n                {id: 'img', name: \"图片\"},\n                {id: 'video', name: \"视频\"},\n                {id: 'voice', name: \"语音\"},\n                {id: 'link', name: \"链接\"},\n            ]}/>\n        </SimpleForm>\n    </Create>\n);\n","import {ParseAuth, ParseClient} from \"ra-data-parse\";\n\nconst parseConfig = {\n    URL: process.env.SERVER_URL || '/parse',\n    JAVASCRIPT_KEY: '',\n    APP_ID: 'mynews'\n}\n\nexport const dataProvider = ParseClient(parseConfig);\n// Pass it as the second parameter after the base URL.\nexport const authProvider = ParseAuth(parseConfig);","import React from 'react';\nimport './App.css';\n\nimport { Admin, Resource } from 'react-admin';\nimport { TopicList, TopicShow, TopicEdit, TopicCreate } from './topics/TopicList';\nimport { NewsList, NewsShow, NewsEdit, NewsCreate } from './news/NewsList';\nimport {dataProvider, authProvider} from \"./models/data_provider_config\";\n\nconst App = () => (\n    <Admin\n      title=\"我的阅读器\"\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n      >\n        <Resource name=\"TopicModel\"  options={{ label: \"订阅管理\" }}  list={TopicList} show={TopicShow} edit={TopicEdit} create={TopicCreate}  />\n        <Resource name=\"NewsModel\"  options={{ label: \"文章管理\" }}  list={NewsList} show={NewsShow} edit={NewsEdit} create={NewsCreate}  />\n    </Admin>\n);\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = {\n  appTitle:\"后台管理\",\n  topicTitle:\"订阅管理\",\n  topicList:\"订阅列表\",\n  topicEdit:\"订阅编辑\",\n    newsTitle:\"新闻管理\",\n    newsList:\"新闻列表\",\n    newsEdit:\"新闻编辑\",\n  text:\"文本\",\n  img:\"图片\",\n  video:\"视频\",\n  voice:\"语音\",\n  link:\"链接\",\n};\n"],"sourceRoot":""}